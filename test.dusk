type Hello struct {
    a: int,
    b: float,
};

type HelloUniform struct {
    a: int,
    b: float,
};

type HelloStorage struct {
    a: int,
    b: float,
};
// [push_constant] let pc : struct {
	
// };

[uniform, set(0), binding(0)] let uniform : HelloUniform; 
[storage, set(0), binding(1)] let storage : HelloStorage; 
[set(0), binding(2)] let image : @Image2D(float);
[set(0), binding(3)] let image2 : @Image3DSampler(float);
[set(0), binding(4)] let sampler : @Sampler();


fn test(param: int) int {
    let a: int = param;
    return a;
}

fn test2(param: int) int {
    return param;
}

type VsOutput struct {
    [builtin(position)] pos: float3,
};

[stage(vertex)]
fn vs_main(
    [location(0)] pos: float3,
    [location(1)] uv: float2,
) VsOutput {
    let my_image: @Image2D(float) = image;
    let a: float3;
    let b: float = a.xyz.z;
    let c: int = test(1);
    c = test2(1);
    let d: float3 = float3(0.1123);
    let e: float3x3 = float3x3(
        float3(0.1123),
        float3(0.1123),
        float3(0.1123),
    );
    let f: float3x3 = float3x3(d);

    let str: Hello = Hello.{
        a: 123,
        b: d.x,
    };

    str = Hello.{ a: 123, b: 321 };

    str.a = 123;

    {
        let member: float = str.b;
    }

    // out_uv = in_uv;
    // out_position = float4(in_pos, 1);
    return VsOutput.{
        pos: float3(0),
    };
}

[stage(fragment)]
fn fs_main(in_pos: float3) float4 {
    // let color: float4 = @sample(sampler, image, uv);

    // out_color = float4(color, 1.0);

    // let a: float3 = in_pos;

    return float4(1);
}
