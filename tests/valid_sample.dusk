type Hello struct {
    a: int,
    b: float,
};

var<push_constant> pc : struct (std140) {
    a: float3,
    some_buf: ptr<buffer, Hello, 16>,
};

[set(0), binding(0)]
var<uniform> uniform : struct (std140) {
    a: int,
    b: float,
    c: float3,
    some_arr: []float,
};

[set(0), binding(1), read_only]
var<storage> camera_buffers: []struct (block, std430) {
    cameras: []struct (std430) {
        pos: float4,
        view: float4x4,
        proj: float4x4,
    },
};

[set(0), binding(2)] var image : @Image2D(float);
[set(0), binding(3)] var image2 : @Image3DSampler(float);
[set(0), binding(4)] var sampler : @Sampler();

fn test(param: int) int {
    var a: int = param;
    return a;
}

fn test2(param: int) int {
    return param;
}

type VsOutput struct {
    [builtin(position)] pos: float3,
};

type VsInput struct {
    [location(0)] pos: float3,
    [location(1)] uv: float2,
};

[stage(vertex)]
fn vs_main(
    input: VsInput,
) VsOutput {
    var my_image: @Image2D(float) = image;
    var a: float3;
    var b: float = a.xyz.z;
    var c: int = test(1);
    c = test2(1);
    var d: float3 = float3(0.1123);
    var e: float3x3 = float3x3(
        float3(0.1123),
        float3(0.1123),
        float3(0.1123),
    );
    var f: float3x3 = float3x3(d);

    var str: Hello = Hello{
        .a = 123,
        .b = d.x,
    };

    str = Hello{ .a = 123, .b = 321 };

    str.a = 123;

    {
        var member: float = str.b;
    }

    // out_uv = in_uv;
    // out_position = float4(in_pos, 1);
    return VsOutput{
        .pos = input.pos,
    };
}

[stage(fragment)]
fn fs_main([location(0)] in_pos: float3) [location(0)] float4 {
    // var color: float4 = @sample(sampler, image, uv);

    // out_color = float4(color, 1.0);

    // var a: float3 = in_pos;

    var i: int = 123;
    var u: uint = uint(i);
    i = 321;
    var f: float = float(i);

    var s: float2 = @sin(float2(123,123));
    s = @tan(s);
    s = @atanh(s);
    s = @sqrt(s);
    s = @inverseSqrt(s);
    s = @log(s);
    s = @fract(s);
    s = @ceil(s);
    s = @floor(s);
    s = @trunc(s);
    s = @exp2(s) + s * (123 + 123);

    var my_arr_arr: [2][2]float;
    var my_arr: [2]float = my_arr_arr[0];
    my_arr_arr[0][0] = 123;

    var my_mat: float4x4;
    var my_vec: float4;
    my_mat = my_mat * my_mat;
    my_vec = my_mat * -my_vec;

    my_vec += float4(1);

    var other: float3 = float3(1).xxx;
    other.x = 123;
    return float4(float3(1, 2, 3), 1);
}

[stage(fragment)]
fn fs_main2([location(0)] in_pos: float3) [location(0)] float4 {
    var some_var: int = 123;
    if (int(1) == int(0)) {

    }

    while (some_var == int(0)) {
    }

    var some_bool : bool = true || false;
    if (some_bool) {
        var asdasdasd: uint = @abs(uint(123));
    }

    var dist: float = @distance(float3(1, 2, 3), float3(3, 2, 1));
    var norm: float3 = @normalize(float3(1, 2, 3));
    var dot: float = @dot(norm, float3(3, 2, 1));
    var len: float = @length(norm);
    var cross: float3 = @cross(norm, norm);
    var reflect: float3 = @reflect(norm, norm);
    var refract: float3 = @refract(norm, norm, 0.5);
    var min: float = @min(0.5, 0.3);
    var max: float3 = @max(norm, norm);
    var mix: float3 = @mix(norm, norm, float3(0.2));
    var clamp: float3 = @clamp(norm, float3(0.1), float3(0.2));
    var len2: uint = uniform.some_arr.len;

    var mat: float3x3 = float3x3(
        float3(1),
        float3(2),
        float3(3),
    );
    var determinant: float = @determinant(@inverse(mat));

    return float4(float3(1, 2, 3), 1);
}

[stage(fragment)]
fn fs_main3([location(0)] in_pos: float3) [location(0)] float4 {
    var count: int = 0;
    while (true) {
        if (count > int(5)) break;
    }

    return float4(float3(1, 2, 3), 1);
}

type VsOutput2 struct {
    [builtin(position)] pos: float4,
};

type VsInput2 struct {
    [builtin(vertex_index)] index: uint,
};

[stage(vertex)]
fn test_vertex(in: VsInput2) VsOutput2 {
    var vertices: [3]float4;
    vertices[0] = float4(1, 0, 0, 1);
    vertices[1] = float4(0, 1, 0, 1);
    vertices[2] = float4(1, 1, 0,1 );
    return VsOutput2{
        .pos = vertices[in.index],
    };
}
